// Mocks generated by Mockito 5.4.6 from annotations
// in nhasixapp/test/presentation/blocs/content/content_bloc_simple_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:logger/src/log_level.dart' as _i12;
import 'package:logger/src/logger.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nhasixapp/domain/entities/entities.dart' as _i3;
import 'package:nhasixapp/domain/repositories/repositories.dart' as _i2;
import 'package:nhasixapp/domain/usecases/content/get_content_list_usecase.dart'
    as _i6;
import 'package:nhasixapp/domain/usecases/content/get_random_content_usecase.dart'
    as _i8;
import 'package:nhasixapp/domain/usecases/content/search_content_usecase.dart'
    as _i7;
import 'package:nhasixapp/domain/usecases/favorites/add_to_favorites_usecase.dart'
    as _i9;
import 'package:nhasixapp/domain/usecases/favorites/remove_from_favorites_usecase.dart'
    as _i10;
import 'package:nhasixapp/domain/value_objects/value_objects.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeContentListResult_0 extends _i1.SmartFake
    implements _i2.ContentListResult {
  _FakeContentListResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContent_1 extends _i1.SmartFake implements _i3.Content {
  _FakeContent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContentStatistics_2 extends _i1.SmartFake
    implements _i2.ContentStatistics {
  _FakeContentStatistics_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentRepository extends _i1.Mock implements _i2.ContentRepository {
  MockContentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ContentListResult> getContentList({
    int? page = 1,
    _i3.SortOption? sortBy = _i3.SortOption.newest,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentList,
          [],
          {
            #page: page,
            #sortBy: sortBy,
          },
        ),
        returnValue:
            _i4.Future<_i2.ContentListResult>.value(_FakeContentListResult_0(
          this,
          Invocation.method(
            #getContentList,
            [],
            {
              #page: page,
              #sortBy: sortBy,
            },
          ),
        )),
      ) as _i4.Future<_i2.ContentListResult>);

  @override
  _i4.Future<_i3.Content> getContentDetail(_i5.ContentId? contentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentDetail,
          [contentId],
        ),
        returnValue: _i4.Future<_i3.Content>.value(_FakeContent_1(
          this,
          Invocation.method(
            #getContentDetail,
            [contentId],
          ),
        )),
      ) as _i4.Future<_i3.Content>);

  @override
  _i4.Future<_i2.ContentListResult> searchContent(_i3.SearchFilter? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchContent,
          [filter],
        ),
        returnValue:
            _i4.Future<_i2.ContentListResult>.value(_FakeContentListResult_0(
          this,
          Invocation.method(
            #searchContent,
            [filter],
          ),
        )),
      ) as _i4.Future<_i2.ContentListResult>);

  @override
  _i4.Future<List<_i3.Content>> getRandomContent({int? count = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRandomContent,
          [],
          {#count: count},
        ),
        returnValue: _i4.Future<List<_i3.Content>>.value(<_i3.Content>[]),
      ) as _i4.Future<List<_i3.Content>>);

  @override
  _i4.Future<_i2.ContentListResult> getPopularContent({
    _i2.PopularTimeframe? timeframe = _i2.PopularTimeframe.allTime,
    int? page = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularContent,
          [],
          {
            #timeframe: timeframe,
            #page: page,
          },
        ),
        returnValue:
            _i4.Future<_i2.ContentListResult>.value(_FakeContentListResult_0(
          this,
          Invocation.method(
            #getPopularContent,
            [],
            {
              #timeframe: timeframe,
              #page: page,
            },
          ),
        )),
      ) as _i4.Future<_i2.ContentListResult>);

  @override
  _i4.Future<_i2.ContentListResult> getContentByTag({
    required _i3.Tag? tag,
    int? page = 1,
    _i3.SortOption? sortBy = _i3.SortOption.newest,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentByTag,
          [],
          {
            #tag: tag,
            #page: page,
            #sortBy: sortBy,
          },
        ),
        returnValue:
            _i4.Future<_i2.ContentListResult>.value(_FakeContentListResult_0(
          this,
          Invocation.method(
            #getContentByTag,
            [],
            {
              #tag: tag,
              #page: page,
              #sortBy: sortBy,
            },
          ),
        )),
      ) as _i4.Future<_i2.ContentListResult>);

  @override
  _i4.Future<List<_i3.Content>> getRelatedContent({
    required _i5.ContentId? contentId,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRelatedContent,
          [],
          {
            #contentId: contentId,
            #limit: limit,
          },
        ),
        returnValue: _i4.Future<List<_i3.Content>>.value(<_i3.Content>[]),
      ) as _i4.Future<List<_i3.Content>>);

  @override
  _i4.Future<List<_i3.Tag>> getAllTags({
    String? type,
    _i2.TagSortOption? sortBy = _i2.TagSortOption.count,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTags,
          [],
          {
            #type: type,
            #sortBy: sortBy,
          },
        ),
        returnValue: _i4.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
      ) as _i4.Future<List<_i3.Tag>>);

  @override
  _i4.Future<List<_i3.Tag>> searchTags({
    required String? query,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTags,
          [],
          {
            #query: query,
            #limit: limit,
          },
        ),
        returnValue: _i4.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
      ) as _i4.Future<List<_i3.Tag>>);

  @override
  _i4.Future<_i2.ContentListResult> getCachedContent({int? page = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedContent,
          [],
          {#page: page},
        ),
        returnValue:
            _i4.Future<_i2.ContentListResult>.value(_FakeContentListResult_0(
          this,
          Invocation.method(
            #getCachedContent,
            [],
            {#page: page},
          ),
        )),
      ) as _i4.Future<_i2.ContentListResult>);

  @override
  _i4.Future<void> cacheContent({
    required List<_i3.Content>? contents,
    bool? replaceExisting = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheContent,
          [],
          {
            #contents: contents,
            #replaceExisting: replaceExisting,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearCache({Duration? olderThan}) => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
          {#olderThan: olderThan},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> verifyContentExists(_i5.ContentId? contentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyContentExists,
          [contentId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.ContentStatistics> getContentStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentStatistics,
          [],
        ),
        returnValue:
            _i4.Future<_i2.ContentStatistics>.value(_FakeContentStatistics_2(
          this,
          Invocation.method(
            #getContentStatistics,
            [],
          ),
        )),
      ) as _i4.Future<_i2.ContentStatistics>);
}

/// A class which mocks [GetContentListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetContentListUseCase extends _i1.Mock
    implements _i6.GetContentListUseCase {
  MockGetContentListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ContentListResult> call(_i6.GetContentListParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.ContentListResult>.value(_FakeContentListResult_0(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.ContentListResult>);
}

/// A class which mocks [SearchContentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchContentUseCase extends _i1.Mock
    implements _i7.SearchContentUseCase {
  MockSearchContentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ContentListResult> call(_i3.SearchFilter? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [filter],
        ),
        returnValue:
            _i4.Future<_i2.ContentListResult>.value(_FakeContentListResult_0(
          this,
          Invocation.method(
            #call,
            [filter],
          ),
        )),
      ) as _i4.Future<_i2.ContentListResult>);
}

/// A class which mocks [GetRandomContentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomContentUseCase extends _i1.Mock
    implements _i8.GetRandomContentUseCase {
  MockGetRandomContentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i3.Content>> call(int? count) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [count],
        ),
        returnValue: _i4.Future<List<_i3.Content>>.value(<_i3.Content>[]),
      ) as _i4.Future<List<_i3.Content>>);
}

/// A class which mocks [AddToFavoritesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddToFavoritesUseCase extends _i1.Mock
    implements _i9.AddToFavoritesUseCase {
  MockAddToFavoritesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(_i9.AddToFavoritesParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [RemoveFromFavoritesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveFromFavoritesUseCase extends _i1.Mock
    implements _i10.RemoveFromFavoritesUseCase {
  MockRemoveFromFavoritesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(_i10.RemoveFromFavoritesParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i11.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> get init => (super.noSuchMethod(
        Invocation.getter(#init),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void v(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void t(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #t,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void d(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void e(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void wtf(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void f(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #f,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void log(
    _i12.Level? level,
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
          ],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isClosed() => (super.noSuchMethod(
        Invocation.method(
          #isClosed,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
