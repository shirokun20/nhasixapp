// Mocks generated by Mockito 5.4.6 from annotations
// in nhasixapp/test/presentation/blocs/splash/splash_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:connectivity_plus/connectivity_plus.dart' as _i12;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i13;
import 'package:dio/dio.dart' as _i2;
import 'package:logger/logger.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nhasixapp/data/datasources/remote/anti_detection.dart' as _i5;
import 'package:nhasixapp/data/datasources/remote/cloudflare_bypass_no_webview.dart'
    as _i4;
import 'package:nhasixapp/data/datasources/remote/nhentai_scraper.dart' as _i3;
import 'package:nhasixapp/data/datasources/remote/remote_data_source.dart'
    as _i7;
import 'package:nhasixapp/data/models/content_model.dart' as _i6;
import 'package:nhasixapp/data/models/tag_model.dart' as _i10;
import 'package:nhasixapp/domain/entities/search_filter.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNhentaiScraper_1 extends _i1.SmartFake
    implements _i3.NhentaiScraper {
  _FakeNhentaiScraper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCloudflareBypassNoWebView_2 extends _i1.SmartFake
    implements _i4.CloudflareBypassNoWebView {
  _FakeCloudflareBypassNoWebView_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAntiDetection_3 extends _i1.SmartFake implements _i5.AntiDetection {
  _FakeAntiDetection_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContentModel_4 extends _i1.SmartFake implements _i6.ContentModel {
  _FakeContentModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i7.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.Dio);

  @override
  _i3.NhentaiScraper get scraper => (super.noSuchMethod(
        Invocation.getter(#scraper),
        returnValue: _FakeNhentaiScraper_1(
          this,
          Invocation.getter(#scraper),
        ),
      ) as _i3.NhentaiScraper);

  @override
  _i4.CloudflareBypassNoWebView get cloudflareBypass => (super.noSuchMethod(
        Invocation.getter(#cloudflareBypass),
        returnValue: _FakeCloudflareBypassNoWebView_2(
          this,
          Invocation.getter(#cloudflareBypass),
        ),
      ) as _i4.CloudflareBypassNoWebView);

  @override
  _i5.AntiDetection get antiDetection => (super.noSuchMethod(
        Invocation.getter(#antiDetection),
        returnValue: _FakeAntiDetection_3(
          this,
          Invocation.getter(#antiDetection),
        ),
      ) as _i5.AntiDetection);

  @override
  _i8.Future<bool> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<List<_i6.ContentModel>> getContentList({int? page = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentList,
          [],
          {#page: page},
        ),
        returnValue:
            _i8.Future<List<_i6.ContentModel>>.value(<_i6.ContentModel>[]),
      ) as _i8.Future<List<_i6.ContentModel>>);

  @override
  _i8.Future<_i6.ContentModel> getContentDetail(String? contentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentDetail,
          [contentId],
        ),
        returnValue: _i8.Future<_i6.ContentModel>.value(_FakeContentModel_4(
          this,
          Invocation.method(
            #getContentDetail,
            [contentId],
          ),
        )),
      ) as _i8.Future<_i6.ContentModel>);

  @override
  _i8.Future<List<_i6.ContentModel>> searchContent(_i9.SearchFilter? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchContent,
          [filter],
        ),
        returnValue:
            _i8.Future<List<_i6.ContentModel>>.value(<_i6.ContentModel>[]),
      ) as _i8.Future<List<_i6.ContentModel>>);

  @override
  _i8.Future<_i6.ContentModel> getRandomContent() => (super.noSuchMethod(
        Invocation.method(
          #getRandomContent,
          [],
        ),
        returnValue: _i8.Future<_i6.ContentModel>.value(_FakeContentModel_4(
          this,
          Invocation.method(
            #getRandomContent,
            [],
          ),
        )),
      ) as _i8.Future<_i6.ContentModel>);

  @override
  _i8.Future<List<_i6.ContentModel>> getPopularContent({
    String? period = 'all',
    int? page = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularContent,
          [],
          {
            #period: period,
            #page: page,
          },
        ),
        returnValue:
            _i8.Future<List<_i6.ContentModel>>.value(<_i6.ContentModel>[]),
      ) as _i8.Future<List<_i6.ContentModel>>);

  @override
  _i8.Future<List<_i10.TagModel>> getAllTags() => (super.noSuchMethod(
        Invocation.method(
          #getAllTags,
          [],
        ),
        returnValue: _i8.Future<List<_i10.TagModel>>.value(<_i10.TagModel>[]),
      ) as _i8.Future<List<_i10.TagModel>>);

  @override
  _i8.Future<List<_i10.TagModel>> getTagsByType(String? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTagsByType,
          [type],
        ),
        returnValue: _i8.Future<List<_i10.TagModel>>.value(<_i10.TagModel>[]),
      ) as _i8.Future<List<_i10.TagModel>>);

  @override
  _i8.Future<bool> checkCloudflareStatus() => (super.noSuchMethod(
        Invocation.method(
          #checkCloudflareStatus,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> bypassCloudflare() => (super.noSuchMethod(
        Invocation.method(
          #bypassCloudflare,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i11.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> get init => (super.noSuchMethod(
        Invocation.getter(#init),
        returnValue: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void v(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void t(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #t,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void d(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void e(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void wtf(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void f(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #f,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void log(
    _i11.Level? level,
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
          ],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isClosed() => (super.noSuchMethod(
        Invocation.method(
          #isClosed,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i12.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<_i13.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i8.Stream<_i13.ConnectivityResult>.empty(),
      ) as _i8.Stream<_i13.ConnectivityResult>);

  @override
  _i8.Future<_i13.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i8.Future<_i13.ConnectivityResult>.value(
            _i13.ConnectivityResult.bluetooth),
      ) as _i8.Future<_i13.ConnectivityResult>);
}
